[cocos2d-x-tools]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = cocos2dx_tools

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace =

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/include
android_flags = -D_SIZE_T_DEFINED_ 

clang_headers = -I%(clangllvmdir)s/lib/clang/3.3/include 
clang_flags = -nostdinc -x c++ -std=c++11

cocos_headers = -I%(cocosdir)s -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/extensions/ -I%(cocosdir)s/external/ -I%(cocosdir)s/cocos/network -I/Work/WORKS-SVN/+++MOGGEN/MOGGEN-DEV/libs/cocos2d-x-tools/src -I%(cocosdir)s/cocos/audio/include/
cocos_flags = -DANDROID

cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
tools_prefix = /Work/WORKS-SVN/+++MOGGEN/MOGGEN-DEV/libs/cocos2d-x-tools/src
headers = %(tools_prefix)s/cocos2d-x-tools.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = YHObject ActionContext AnimatorInitData AnimatorAnimData AnimatorData AnimatorModuleData AnimatorSettingData AnimatorDataCache AnimatorModuleDataCache AnimatorSettingDataCache YHCCActionHelper YHAnimationCache YHAnimationFrameDefiner YHAnimationDefiner YHSpriteDefiner YHAnimationPair YHAnimationHelper YHAnimationKeyEvents AvatarComponent YHEffectDefiner YHEffectFactory YHDefaultFiniteEffect CCEncryptNumber CCKeyTimeCallbackSprite CCSpecialSprite YHUIUnitComboBackground YHUITileBackground YHUIVirguleNumber YHUITimeNumber YHUISpriteNumber YHUIProductNumber YHUIPercentNumber YHUIDecimalNumber YHDevice YHGameBasicInfo YHEncryHelper YHLanguageManager YHFontManager YHDataManager SoundController YHTimer YHTimerCache YHISpriteNumber AEEffectSprite Shaker ScissorNode ShaderNode
# New.* Sprite.* Scene Node.* Director Layer.* Menu.* Touch .*Action.* Move.* Rotate.* Blink.* Tint.* Sequence Repeat.* Fade.* Ease.* Scale.* Transition.* Spawn Animat.* Flip.* Delay.* Skew.* Jump.* Place.* Show.* Progress.* PointArray ToggleVisibility.* RemoveSelf Hide Particle.* Label.* Atlas.* TextureCache.* Texture2D Cardinal.* CatmullRom.* ParallaxNode TileMap.* .*TMX.* CallFunc RenderTexture GridAction Grid3DAction GridBase$ .+Grid Shaky3D Waves3D FlipX3D FlipY3D Speed ActionManager Set SimpleAudioEngine Scheduler Timer Orbit.* Follow.* Bezier.* CardinalSpline.* Camera.* DrawNode .*3D$ Liquid$ Waves$ ShuffleTiles$ TurnOffTiles$ Split.* Twirl$ FileUtils$ GLProgram ShaderCache Application ClippingNode MotionStreak ^Ref$ UserDefault GLViewProtocol GLView Image Event(?!.*(Physics).*).* Component ProtectedNode Console Mesh GLProgramCache GLProgramState

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = YHAnimationDefiner::[getFrameDefines getFrameDefinersPoint],
    YHAnimationHelper::[createAnimationDefiner_Ver1 createAnimationDefiner_Ver2 createAnimation], 
    AvatarComponent::[setDelegate getDelegate init setHandler],
    YHDefaultFiniteEffect::[setDelegate getDelegate init setHandler],
    CCKeyTimeCallbackSprite::[setDelegate getDelegate init setHandler],
    YHAnimationKeyEvents::[setDelegate getDelegate setHandler getHandler init],
    AEEffectSprite::[setFinishCallback setHandler],
    YHDataManager::[setHandler init]

rename_functions =

rename_classes =

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents =

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip =

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = YHObject AvatarComponent YHDefaultFiniteEffect CCSpecialSprite YHUISpriteNumber YHISpriteNumber HAbstractDataSetting YHEvent YHEventListener YHSpriteNumber_AlignType TileBackground_TileType
# Action FiniteTimeAction ActionInterval ActionEase EaseRateAction EaseElastic EaseBounce ActionInstant GridAction Grid3DAction TiledGrid3DAction Director SpriteFrameCache TransitionEaseScene Set SimpleAudioEngine FileUtils Application ClippingNode Label GLViewProtocol GLView EventAcceleration DisplayLinkDirector Component Console

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = no

